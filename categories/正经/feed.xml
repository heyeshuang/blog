<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>正经 on 林中阴影</title><link>https://blog.heysh.xyz/categories/%E6%AD%A3%E7%BB%8F/</link><description>Recent content in 正经 on 林中阴影</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&amp;copy;贺叶霜，&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA&lt;/a></copyright><lastBuildDate>Sun, 04 Aug 2019 20:03:49 +0800</lastBuildDate><atom:link href="https://blog.heysh.xyz/categories/%E6%AD%A3%E7%BB%8F/feed.xml" rel="self" type="application/rss+xml"/><item><title>Python中光学计算相关的库/Awesome Python for Optics</title><link>https://blog.heysh.xyz/2019/08/04/python-for-optics/</link><pubDate>Sun, 04 Aug 2019 20:03:49 +0800</pubDate><guid>https://blog.heysh.xyz/2019/08/04/python-for-optics/</guid><description>&lt;blockquote>
&lt;p>这大概是本博客第一次涉及博主在现实世界中的本职工作，大概算是一个好的开始。&lt;/p>
&lt;/blockquote>
&lt;p>在光学设计及模拟的领域，商业软件，比如Zemax/Code V、LASCAD、GLAD等，提供了较为完整的解决方案，对于较为前沿的领域，国内研究的事实标准是，通过MATLAB自行编写可靠性和可维护性都存在较大问题的脚本。但是，对于一些&lt;del>研究经费不足同时工作量不饱和的&lt;/del>课题组，了解这个古老的学科与当今流行语言的交集，可能也具有一定的意义。&lt;/p>
&lt;p>TL; DR：光学计算是一个很宽泛的话题，针对我的要求，之后我大概会试试&lt;a href="https://github.com/opticspy/lightpipes">LightPipes&lt;/a>.&lt;/p>
&lt;p>以下是我找到的一些库的对比。&lt;/p>
&lt;h2 id="spacetelescopepoppyhttpsgithubcomspacetelescopepoppy">&lt;a href="https://github.com/spacetelescope/poppy">spacetelescope/poppy&lt;/a>&lt;/h2>
&lt;figure>&lt;img src="poppy.png"/>
&lt;/figure>
&lt;p>这个库本身是为詹姆斯·韦伯空间望远镜的模拟而设计的，从其&lt;a href="https://nbviewer.jupyter.org/github/spacetelescope/poppy/blob/master/notebooks/POPPY_tutorial.ipynb">tutorial&lt;/a>也可以看出，这个库的主要目的大概是，在衍射明显的条件下模拟成像过程、计算点扩散函数并分析成像质量，特别是针对天文望远镜领域。&lt;/p>
&lt;p>因为我并不真正 &lt;em>理解&lt;/em> 光学成像，我并没有办法判断该库的潜在用途，不过在激光器设计方面该库可能并不适用。&lt;/p>
&lt;h2 id="sterncatopticspyhttpsgithubcomsterncatopticspy">&lt;a href="https://github.com/Sterncat/opticspy">Sterncat/opticspy&lt;/a>&lt;/h2>
&lt;p>&lt;img src="opticspy.png" alt="opticspy">&lt;/p>
&lt;p>看起来，这个库主要用于镜片设计，类似Zemax/Code V等软件所做的那样。具体上，能够完成光线追迹（但是没说能够优化），利用泽尼克多项式拟合（透镜表面/波前？），并计算镜片表面的干涉条纹。下次如果要计算纯粹干涉方面的内容我可能会尝试一下这个。&lt;/p>
&lt;p>另外，这个库散发着一种爱好者的气息，&lt;code>施工中&lt;/code>标志散落在文档各处。&lt;del>对于这种类型的项目可能还是让企业来做比较合适；可是开源之后又赚不到钱。&lt;/del>&lt;/p>
&lt;h2 id="nanocompmeephttpsgithubcomnanocompmeep">&lt;a href="https://github.com/NanoComp/meep">NanoComp/meep&lt;/a>&lt;/h2>
&lt;p>&lt;img src="meep.png" alt="meep">&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Finite-difference_time-domain_method">FDTD&lt;/a>法计算电磁场。这玩意让我想起了我短暂的研究生岁月，那时我学到一件事……人的能力是有极限的。&lt;/p>
&lt;p>下一个。&lt;/p>
&lt;h2 id="sympyhttpsdocssympyorglatestmodulesphysicsopticsindexhtml">&lt;a href="https://docs.sympy.org/latest/modules/physics/optics/index.html">SymPy&lt;/a>&lt;/h2>
&lt;p>SciPy的一个组成部分，拥有一个光学计算模块，但仅仅在代入公式的水平。嗯，如果只是要算算高斯光的传输矩阵什么的，问题应该不大。&lt;/p>
&lt;h2 id="cihologramaspyoptoolshttpsgithubcomcihologramaspyoptools">&lt;a href="https://github.com/cihologramas/pyoptools">cihologramas/pyoptools&lt;/a>&lt;/h2>
&lt;p>大概也是Ray Trace，大概也是个人作品，而且例子都是用一种我看不懂的语言写的。下一个。&lt;/p>
&lt;h2 id="rezonatorwwwrezonatororion-projectorgsimcavsimcavhttpsgithubcomsimcavsimcav等">&lt;a href="www.rezonator.orion-project.org">rezonator&lt;/a>、&lt;a href="https://github.com/simcav/simcav">simcav/simcav&lt;/a>等&lt;/h2>
&lt;p>Rezonator其实不能算是Python库，不过倒也是免费的，而且做的比另一个程序更完整一些。这两个软件的功能比较类似，仅通过谐振腔传输矩阵计算激光谐振腔特性，对于简单的腔形，可能这个就足够了。&lt;/p>
&lt;h2 id="opticspylightpipeshttpsgithubcomopticspylightpipes">&lt;a href="https://github.com/opticspy/lightpipes">opticspy/lightpipes&lt;/a>&lt;/h2>
&lt;p>&lt;img src="lightpipes.png" alt="lightpipes">&lt;/p>
&lt;p>最后我找到的是这个，它的&lt;a href="http://www.okotech.com/lightpipes">官网&lt;/a>上说，这本来是一个*nix下的C++库，1999年开源，并增加了免费Python接口——听起来很靠谱。
具体上来说，这玩意也包含几何光学和衍射光学的相关内容，而且在它的说明文档里直接体现了&lt;a href="https://github.com/opticspy/Optics/blob/master/GeometricOptics/resonator_geometric_optics.ipynb">高斯光谐振腔矩阵计算&lt;/a>和&lt;a href="https://opticspy.github.io/lightpipes/examples_of_lightpipes_for_python.html#laser-examples">强衍射条件下谐振腔的计算&lt;/a>（虽然我还没有看懂）。&lt;/p>
&lt;p>之后，可能会在这个的基础上对激光器进行一些分析——如果计划没有变更的话。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>来自2019-10-23的更新：&lt;/p>
&lt;/blockquote>
&lt;h2 id="finesse-and-pykathttpwwwgwopticsorgfinesse">&lt;a href="http://www.gwoptics.org/finesse/">Finesse and PyKat&lt;/a>&lt;/h2>
&lt;p>为了LIGO设计的语言，用于引力波探测器的光路设计。Finesse有一种十分简单而复古的语法，而&lt;a href="http://www.gwoptics.org/pykat">PyKat&lt;/a>与其说是它的 &lt;em>封装&lt;/em> ，倒不如说是拿报纸包了一下。&lt;/p>
&lt;p>当然，该程序的功能还是挺强大的，甚至还有一些量子光学的内容&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。如果有人想要尝试的话，可以从&lt;a href="http://www.gwoptics.org/learn/">这里&lt;/a>开始。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>来自2020-6-1的更新：&lt;/p>
&lt;/blockquote>
&lt;h2 id="rayopthttpsgithubcomquartiqrayopt">&lt;a href="https://github.com/quartiq/rayopt">RayOpt&lt;/a>&lt;/h2>
&lt;p>&lt;img src="rayopt.png" alt="rayopt">
&lt;img src="rayopt2.png" alt="rayopt">&lt;/p>
&lt;p>和&lt;a href="#sterncatopticspyhttpsgithubcomsterncatopticspy">opticspy&lt;/a>一样，RayOpt也是一组用于代替Zemax的程序，&lt;strong>看起来&lt;/strong>更不像一个玩具。当然，如果要对这样的库作出一个中肯的评价，我觉得至少还要学习十年左右。所以我只是把它列在这里，并且祝&lt;em>路过的旅行者&lt;/em>好运。&lt;/p>
&lt;p>另外，我下次更新这篇文章的时候，差不多要给它们分分类了。毕竟光学计算是一个很宽泛的话题。&lt;del>我先立一个flag在这里。&lt;/del>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>比如&lt;a href="http://www.gwoptics.org/finesse/reference/">语法说明&lt;/a>里提到了squeezed vacuum input source。不要问我&lt;a href="https://en.wikipedia.org/wiki/Squeezed_coherent_state">那是什么&lt;/a>。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>另一些预测未来的尝试，以及问题</title><link>https://blog.heysh.xyz/2018/05/02/dont-trust-the-oracle/</link><pubDate>Wed, 02 May 2018 20:30:20 +0800</pubDate><guid>https://blog.heysh.xyz/2018/05/02/dont-trust-the-oracle/</guid><description>&lt;p>&lt;a href="https://blog.heysh.xyz/2018/03/26/who-will-roll-the-dice/">之前&lt;/a>写到，我们不能从水晶球中看到未来的清晰倒影。而本次的结论更加悲观：那些模糊的幻象基本上没有任何效果，并且很可能是有害的。&lt;/p>
&lt;p>另，本文部分是&lt;a href="https://book.douban.com/subject/25782902/">《反脆弱》&lt;/a>的读书笔记。虽然作者有的观点&lt;del>过于极端&lt;/del>让人不爽，但是其理论仍能给人启发……特别是对于梦想预测未来的人来说。&lt;/p>
&lt;h2 id="现实参数太多而数据量太少">现实：参数太多而数据量太少&lt;/h2>
&lt;p>作为一个实验室民工，当我在说“波长与温度成正比”的时候，大概只需要测量8次就够了。可是，当参数太多（而且不能控制变量）的时候，情况变得复杂起来。很多时候，能够得到的数据大概是这样：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>time&lt;/th>
&lt;th>a&lt;/th>
&lt;th>b&lt;/th>
&lt;th>c&lt;/th>
&lt;th>d&lt;/th>
&lt;th>y&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1996-03-16&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0.75&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2007-04-22&lt;/td>
&lt;td>3&lt;/td>
&lt;td>3&lt;/td>
&lt;td>1&lt;/td>
&lt;td>4&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2018-09-01&lt;/td>
&lt;td>6&lt;/td>
&lt;td>10&lt;/td>
&lt;td>6&lt;/td>
&lt;td>18&lt;/td>
&lt;td>30&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>提问：&lt;span class="math">\(y=?\)&lt;/span>&lt;/p>
&lt;p>A. &lt;span class="math">\(y=5a\)&lt;/span>&lt;/p>
&lt;p>B. &lt;span class="math">\(y=15b+10c-10d\)&lt;/span>&lt;/p>
&lt;p>C. &lt;span class="math">\(y=\text{random}()\)&lt;/span>&lt;/p>
&lt;p>&lt;del>D. &lt;span class="math">\(y\)&lt;/span>是当天大乐透的尾号&lt;/del>&lt;/p>
&lt;p>当然，作为实验民工的话，&lt;code>正交试验法&lt;/code>、&lt;code>典型相关分析&lt;/code>和&lt;code>主成分分析&lt;/code>是找到复杂特性的好手段。可是，现实生活中，并不存在重复实验的条件，而且，我们甚至不能将所有参数一一列举出来。最糟糕的情况下，重要的原因仍然藏在水底。&lt;/p>
&lt;figure>&lt;img src="https://blog.heysh.xyz/img/iceberg.png"
alt="大家喜闻乐见的冰山图.jpg"/>&lt;figcaption>
&lt;p>大家喜闻乐见的冰山图.jpg&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>这时候，关于预测未来这件事，出现了两种截然相反的手段。&lt;/p>
&lt;h2 id="假先知们的伎俩冗余的参数与神秘主义">（假）先知们的伎俩：冗余的参数与神秘主义&lt;/h2>
&lt;p>有时候，仅仅是声称能够预测未来就可以带来实际的好处，无论正确与否；&lt;sup class="footnote-ref" id="fnref:1">&lt;a class="footnote" href="#fn:1">1&lt;/a>&lt;/sup>同时，生物似乎倾向于在事物中寻找规律&lt;sup class="footnote-ref" id="fnref:pigeon">&lt;a class="footnote" href="#fn:pigeon">2&lt;/a>&lt;/sup>。于是，为了垄断对未来的解释权，在可以观察到的参数之外，这些预言家们倾向于将原因复杂化，典型的手法包括“神的旨意”、“群星的角度”和“技术分析”等等。&lt;/p>
&lt;p>此时，由于参数的过量，过拟合能够获得对历史数据相当精确的表述（以及对占卜师的信任），然而其预测能力并不像看起来那样强。但是，我们并没有办法判断预言的正确&lt;code>程度&lt;/code>（今天的恋爱运是69%），同时养成了在新事件发生之后不翻旧账的好习惯（没有“昨日运势”的地址）。这样的假先知在每个时代都能够占据一席之地。&lt;sup class="footnote-ref" id="fnref:2">&lt;a class="footnote" href="#fn:2">3&lt;/a>&lt;/sup>&lt;/p>
&lt;p>应对这样的预言家有一个简单的办法：“不要询问他的意见、预测或建议。只要问他们的投资组合中有什么或者没有什么就行。”换一个时髦一些的说法，叫做“利益相关”，这样的话，错误的预言至少能够得到一些代价。&lt;/p>
&lt;h2 id="奥卡姆剃刀以及为什么在现实中可能失效">奥卡姆剃刀，以及为什么在现实中（可能）失效&lt;/h2>
&lt;p>之前已经提到过&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80">过拟合&lt;/a>这一概念：&lt;/p>
&lt;blockquote>
&lt;p>当可选择的参数的自由度超过数据所包含信息内容时，会减少或破坏模型一般化的能力更甚于适应数据。（维基百科）&lt;/p>
&lt;/blockquote>
&lt;p>一般来说，奥卡姆剃刀是解决过拟合问题的有效途径。在预测能力相似的情况下，引入的假定越少越好。在贝叶斯理论下，可以通过贝叶斯因子（或其不够精确的代替品，&lt;a href="https://zh.wikipedia.org/zh-cn/%E8%B5%A4%E6%B1%A0%E4%BF%A1%E6%81%AF%E9%87%8F%E5%87%86%E5%88%99">赤池信息量准则&lt;/a>等等）来进行判断。现实生活中的噪音比实验数据更多，按理说剃刀会更加锋利，但是，与数学模型不同，生活中：&lt;/p>
&lt;h3 id="样本仍然不足">样本（仍然）不足&lt;/h3>
&lt;p>我们再次遇到了这个问题。生活中很多时候，我们获得的信息类似这样：&lt;/p>
&lt;ul>
&lt;li>“你看隔壁小李，多年的xxx就是吃这个药好的”&lt;/li>
&lt;li>“啥，出去跑步来着？那没关系，药还是得喝”&lt;/li>
&lt;li>“副作用？没事！老王喝了二十多年了身体倍儿棒”&lt;/li>
&lt;/ul>
&lt;p>仅看这些对话，可以得到一个解释力很强，假设又很少的理论，当然我们并不会相信它。日常生活中所能够得到的样本大概如此，有效信息量甚至比噪音还低。指望从中获取什么一般规律/人生哲理/生活智慧，基本上是不现实的——除了给自己增加一些盲目的自信之外。&lt;/p>
&lt;h3 id="火鸡与农场主黑天鹅效应以及损失敏感性">“火鸡与农场主”、黑天鹅效应、以及损失敏感性&lt;/h3>
&lt;p>数学与现实生活的另一个区别是，数学是永恒的。只要公理和逻辑不变，同样的算式总是可以期待相同的结果。而现实生活则不同，每天的日常生活很可能是连续发生的奇迹，而且，一旦奇迹不再发生，很可能带来灾难性的结果。这一问题再次提升了预言的难度：不仅需要对未来的平均值，而且对其方差/极端情况进行描绘。&lt;/p>
&lt;p>同时，相比正确的预测，错误的预测一般会带来更加恶劣的影响，在心理上也会更强的挫败感，这由我们的本能所决定。&lt;/p>
&lt;h2 id="那么">那么……&lt;/h2>
&lt;p>很多时候，人们观察到了一个（或一组）现象，然后盲目地寻找到一个原因，并认为得到了正确的答案。这在我们进化初期十分有效，在今天也比投硬币决定稍微好一些——如果用于决策的证据真的不够的话。&lt;/p>
&lt;p>在更多的情况下，预测未来（并信任这一预测）并不是个好主意。&lt;a href="https://en.wikipedia.org/wiki/Dutch_book">荷兰赌&lt;/a>/两边下注/无风险套利可能是更明智的选择。由于日常生活并不是由精明的数学家所设计，这种机会仍是有可能存在的。&lt;/p>
&lt;p>在必须要做出决定的时候，可能需要注意：&lt;/p>
&lt;ol>
&lt;li>尽可能地获取无偏见的信息；
&lt;ul>
&lt;li>当然，所谓“无偏见”又是另一个故事了。&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>只下能够赔得起的赌注；
&lt;ul>
&lt;li>或者完全不下赌注——如果想成为预言家，而且没有道德洁癖的话。&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>来自19-6-9：&lt;/p>
&lt;p>前几天突然想起一个例子。我们宇宙的最终命运——是重新回到一个闪耀的奇点，还是变成冰冷稀薄的碎片，和&lt;a href="https://zh.wikipedia.org/zh/%E5%AE%87%E5%AE%99%E5%AD%B8%E5%B8%B8%E6%95%B8">一个常数&lt;/a>相关。现在的观测结果显示，这个常数很接近两种可能的分界线，但我们并不能确定自己是对的：&lt;a href="https://www.solidot.org/story?sid=60885">对暗物质质量的计算已经很困难&lt;/a>，更不要提什么暗能量了。&lt;/p>
&lt;div class="footnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">一部分可能由于&lt;a href="https://zh.wikipedia.org/zh-tw/%E8%87%AA%E8%AF%81%E9%A2%84%E8%A8%80">自证预言&lt;/a>，另一部分可能就是流行的KOL什么的了。
&lt;a class="footnote-return" href="#fnref:1">&lt;sup>[return]&lt;/sup>&lt;/a>&lt;/li>
&lt;li id="fn:pigeon">不仅仅是条件反射，而且有非常类似人类的&lt;a href="http://www.psychspace.com/psy/school/001/%27SUPERSTITION%27%20IN%20THE%20PIGEON.htm">“迷信行为”&lt;/a>（'SUPERSTITION' IN THE PIGEON, B. F. Skinner）。我最近才在素材库里发现这个有趣的现象。
&lt;a class="footnote-return" href="#fnref:pigeon">&lt;sup>[return]&lt;/sup>&lt;/a>&lt;/li>
&lt;li id="fn:2">我试图让我不要再刷那些占星师的微博了，但是我瞪了自己一眼，然后说：“不”。
&lt;a class="footnote-return" href="#fnref:2">&lt;sup>[return]&lt;/sup>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>随机性从哪里来？</title><link>https://blog.heysh.xyz/2018/03/26/who-will-roll-the-dice/</link><pubDate>Mon, 26 Mar 2018 21:03:21 +0800</pubDate><guid>https://blog.heysh.xyz/2018/03/26/who-will-roll-the-dice/</guid><description>&lt;blockquote>
&lt;p>当然，没准可以预测“真空中的球形未来”。&lt;/p>
&lt;/blockquote>
&lt;h2 id="量子力学">量子力学……&lt;/h2>
&lt;p>我们都听说过“两朵乌云”的故事，其中一朵后来变成了&lt;strong>量子力学&lt;/strong>，告诉我们上帝（也许）是掷骰子的。这是截止到目前，所有苛刻的家伙都承认的“真正随机”。而且，通过一些简单的装置（比如盖格计数器或者一个虐猫狂人），这些随机可以进入宏观的现实生活。&lt;/p>
&lt;p>&lt;del>或许有一天，我们会发现&lt;code>量子效应只是物质之海表面的涟漪，是物质更深层规律扰动的影子&lt;/code>&lt;/del>&lt;sup class="footnote-ref" id="fnref:liu">&lt;a class="footnote" href="#fn:liu">1&lt;/a>&lt;/sup>&lt;sup class="footnote-ref" id="fnref:bell">&lt;a class="footnote" href="#fn:bell">2&lt;/a>&lt;/sup>——但是，这仍不能让我们真正成为预言家，还有一些东西在阻止我们。&lt;/p>
&lt;h2 id="并不是随机的唯一来源">……并不是随机的唯一来源&lt;/h2>
&lt;p>让我们回到乌云飘来之前。那时候的人们充满了工业革命带来的乐观精神，相信自然是和谐、简单、可预测的：穷尽数学系统，可以找到所有数学定理的证明；如果我们了解整个世界的状态，就可以计算出下一秒的世界。如果没有量子力学，这听起来似乎没有什么问题，除了——&lt;/p>
&lt;h3 id="这里不欢迎近似">这里不欢迎近似&lt;/h3>
&lt;p>即使是微小的误差，也会放大到不可接受的结果，这就是所谓的蝴蝶效应——&lt;/p>
&lt;h3 id="空白处太小放不下计算机">空白处太小，放不下计算机&lt;/h3>
&lt;p>——而且，计算机本身的计算能力也是有限的。不，这不是说Intel又开始挤牙膏了，而是说作为物质本身，其计算能力有限制。对于我们的宇宙来说，它能够计算的总数据不超过&lt;span class="math">\(10^{120}\)&lt;/span>比特&lt;sup class="footnote-ref" id="fnref:PRL">&lt;a class="footnote" href="#fn:PRL">3&lt;/a>&lt;/sup>:可能做一根足够长的杠杆还要更简单一些。&lt;/p>
&lt;h3 id="甚至">甚至……&lt;/h3>
&lt;p>即使我们真的掏空宇宙做出一台超级计算机，当它真正开始计算的时候，首先需要计算自己的状态，那么，首先需要计算&lt;code>计算自己状态时自己的状态&lt;/code>……&lt;/p>
&lt;p>正如&lt;code>证明所有数学定律&lt;/code>，&lt;code>找到不属于自身的集合的集合&lt;/code>，&lt;code>或者判断是不是会停机&lt;/code>一样，当我们观察系统的时候，需要把自己从系统中排除。&lt;/p>
&lt;div class="footnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:liu">刘慈欣，《镜子》。原谅我总喜欢拿科幻小说作例子，这纯粹是因为它们“可能性”的种类比较多。
&lt;a class="footnote-return" href="#fnref:liu">&lt;sup>[return]&lt;/sup>&lt;/a>&lt;/li>
&lt;li id="fn:bell">以上那一行叙述似乎暗示着隐变量理论，作为爱因斯坦&lt;a href="https://mp.weixin.qq.com/s?__biz=MjM5NDA1Njg2MA==&amp;amp;mid=2651981696&amp;amp;idx=1&amp;amp;sn=f4da01857707385ad4c44c8dc9e7c942&amp;amp;scene=2&amp;amp;srcid=0428O8l58rK5JeqU4x9KHYbs&amp;amp;from=timeline&amp;amp;isappinstalled=0#%23">从上帝手中夺过骰子&lt;/a>的方案。然而，加上删除线的原因是，&lt;a href="https://zhuanlan.zhihu.com/p/20202069">对贝尔不等式的实验&lt;/a>宣告了这种理论的终结。个人而言，我还是比较喜欢这种随机性比较高的世界。
&lt;a class="footnote-return" href="#fnref:bell">&lt;sup>[return]&lt;/sup>&lt;/a>&lt;/li>
&lt;li id="fn:PRL">见&lt;a href="https://doi.org/10.1103/PhysRevLett.88.237901">https://doi.org/10.1103/PhysRevLett.88.237901&lt;/a>。老实说，这个量与普朗克长度有关，我们还是躲不开量子力学 ;-)
&lt;a class="footnote-return" href="#fnref:PRL">&lt;sup>[return]&lt;/sup>&lt;/a>&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>幂律分布与Zipf's Law</title><link>https://blog.heysh.xyz/2017/12/16/zipf-law/</link><pubDate>Sat, 16 Dec 2017 20:48:36 +0800</pubDate><guid>https://blog.heysh.xyz/2017/12/16/zipf-law/</guid><description>&lt;p>前几天读了&lt;a href="https://book.douban.com/subject/6749832/">《复杂》&lt;/a>。对复杂学的研究，在人工智能重获热度的今天，似乎获得了新的意义——当然，我们还是不知道炼金术的大锅里面发生了什么。&lt;/p>
&lt;p>幂律分布/Zipf定律/&lt;a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E7%B4%AF%E6%89%98%E6%B3%95%E5%88%99">帕累托法则&lt;/a>/80-20定律/whatever，本质上是同一种东西。这种分布模式和正态分布类似，广泛存在于大自然和人造物的各个角落。一般来说，对于具有：&lt;/p>
&lt;ul>
&lt;li>优先连接性（Preferential attachment）/马太效应
&lt;ul>
&lt;li>“凡有的，还要加给他，叫他有余；没有的，连他所有的也要夺过来。”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>成长性
&lt;ul>
&lt;li>网络的尺度不受客观条件的限制，可以无限增长&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>的网络，其节点连接数较为满足幂律分布。&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=fCn8zs912OE">Youtube上&lt;/a>有个视频对幂律分布讲得很清楚，对其中提到的两个实验，我利用python进行了模拟。模拟中使用的&lt;code>jupyter notebook&lt;/code>文件放在了&lt;a href="https://gist.github.com/heyeshuang/fece5abbd6d1cf826dbaf9c3e76361b7">github gist&lt;/a>上。&lt;/p>
&lt;h2 id="猴子和打字机">猴子和打字机&lt;/h2>
&lt;p>一只猴子（我们叫它Shashi Biya）在打字机上乱敲，它敲二十六个字母和空格概率都相等。那么，咱们能不能看出他的用词习惯？答案是肯定的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#069;font-weight:bold">import&lt;/span> &lt;span style="color:#0cf;font-weight:bold">string&lt;/span>&lt;span style="color:#555">,&lt;/span>&lt;span style="color:#0cf;font-weight:bold">random&lt;/span>
&lt;span style="color:#069;font-weight:bold">from&lt;/span> &lt;span style="color:#0cf;font-weight:bold">collections&lt;/span> &lt;span style="color:#069;font-weight:bold">import&lt;/span> Counter
s&lt;span style="color:#555">=&lt;/span>string&lt;span style="color:#555">.&lt;/span>ascii_lowercase&lt;span style="color:#555">+&lt;/span>&lt;span style="color:#c30">&amp;#34; &amp;#34;&lt;/span>
s&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#c30">&amp;#34;abcd &amp;#34;&lt;/span>
monkey&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#c30">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#555">.&lt;/span>join(random&lt;span style="color:#555">.&lt;/span>choices(s, k&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#f60">10000000&lt;/span>))
monkey&lt;span style="color:#555">=&lt;/span>[m &lt;span style="color:#069;font-weight:bold">for&lt;/span> m &lt;span style="color:#000;font-weight:bold">in&lt;/span> monkey&lt;span style="color:#555">.&lt;/span>split(&lt;span style="color:#c30">&amp;#34; &amp;#34;&lt;/span>) &lt;span style="color:#069;font-weight:bold">if&lt;/span> m]
c&lt;span style="color:#555">=&lt;/span>Counter(monkey)
common&lt;span style="color:#555">=&lt;/span>c&lt;span style="color:#555">.&lt;/span>most_common()[:&lt;span style="color:#f60">10000&lt;/span>]
fre&lt;span style="color:#555">=&lt;/span>[value &lt;span style="color:#069;font-weight:bold">for&lt;/span> (key,value) &lt;span style="color:#000;font-weight:bold">in&lt;/span> common]
plt&lt;span style="color:#555">.&lt;/span>plot(fre)
plt&lt;span style="color:#555">.&lt;/span>xscale(&lt;span style="color:#c30">&amp;#39;log&amp;#39;&lt;/span>)
plt&lt;span style="color:#555">.&lt;/span>yscale(&lt;span style="color:#c30">&amp;#39;log&amp;#39;&lt;/span>)
plt&lt;span style="color:#555">.&lt;/span>show()
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.heysh.xyz/zipf/output_5_0.png"/>&lt;figcaption>
&lt;h4>阶梯形状可能是由于概率相等&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>我们的这位大文豪颇有古风，喜欢用单字（“a”）胜过长单词（“ffsda”），而且用词比例正符合幂律分布：在双log坐标系下，图像大致是一条直线。这很符合直觉：为了得到任何长度大于1的单词，猴子第二次敲的按钮必须不是空格。&lt;/p>
&lt;p>不要嘲笑我们的前辈，人类的语言也具有相同的性质，虽然概率最高的字是the什么的。并不是Zipf’s law限制了猴子打出十四行诗，这或许是个好消息。&lt;/p>
&lt;h2 id="连接曲别针第一种方法">连接曲别针，第一种方法&lt;/h2>
&lt;p>在墙上钉100个钉子，然后随意把曲别针连在上面。哪个钉子上曲别针越多，下一个曲别针挂在上面的概率就越高。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">l&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#f60">100&lt;/span>
&lt;span style="color:#366">list&lt;/span>&lt;span style="color:#555">=&lt;/span>np&lt;span style="color:#555">.&lt;/span>ones(l)
&lt;span style="color:#069;font-weight:bold">for&lt;/span> i &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#366">range&lt;/span>(&lt;span style="color:#f60">100000&lt;/span>):
s&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#366">sum&lt;/span>(&lt;span style="color:#366">list&lt;/span>)
p&lt;span style="color:#555">=&lt;/span>[j&lt;span style="color:#555">/&lt;/span>s &lt;span style="color:#069;font-weight:bold">for&lt;/span> j &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#366">list&lt;/span>]
k&lt;span style="color:#555">=&lt;/span>np&lt;span style="color:#555">.&lt;/span>random&lt;span style="color:#555">.&lt;/span>choice(l,&lt;span style="color:#f60">1&lt;/span>, p&lt;span style="color:#555">=&lt;/span>p)
&lt;span style="color:#366">list&lt;/span>[k]&lt;span style="color:#555">+=&lt;/span>&lt;span style="color:#f60">1&lt;/span>
plt&lt;span style="color:#555">.&lt;/span>plot(&lt;span style="color:#366">sorted&lt;/span>(&lt;span style="color:#366">list&lt;/span>,reverse&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#069;font-weight:bold">True&lt;/span>))
plt&lt;span style="color:#555">.&lt;/span>xscale(&lt;span style="color:#c30">&amp;#39;log&amp;#39;&lt;/span>)
plt&lt;span style="color:#555">.&lt;/span>yscale(&lt;span style="color:#c30">&amp;#39;log&amp;#39;&lt;/span>)
plt&lt;span style="color:#555">.&lt;/span>show() &lt;span style="color:#09f;font-style:italic">#指数分布&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://blog.heysh.xyz/zipf/output_9_0.png"/>&lt;figcaption>
&lt;h4>可惜这只是个指数分布&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>与幂律分布相比，指数分布更加“平缓”，而且在双对数坐标系下也并不是一条直线。&lt;/p>
&lt;h2 id="连接曲别针the-right-way">连接曲别针，the right way&lt;/h2>
&lt;p>现在，我有一把曲别针。我随便拿出两个曲别针，并把它们两个所在的串连接起来。&lt;/p>
&lt;p>假设我对每一个曲别针没有特别的爱好，那么，某个串选中的概率，与串中的曲别针个数正相关。这就是所谓的优先连接性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">tic&lt;span style="color:#555">=&lt;/span>timeit&lt;span style="color:#555">.&lt;/span>default_timer()
l&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#f60">20000&lt;/span>
&lt;span style="color:#366">list&lt;/span>&lt;span style="color:#555">=&lt;/span>[&lt;span style="color:#f60">1&lt;/span>]&lt;span style="color:#555">*&lt;/span>l
&lt;span style="color:#069;font-weight:bold">while&lt;/span> &lt;span style="color:#366">len&lt;/span>(&lt;span style="color:#366">list&lt;/span>)&lt;span style="color:#555">&amp;gt;&lt;/span>&lt;span style="color:#f60">14000&lt;/span>:
s&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#366">sum&lt;/span>(&lt;span style="color:#366">list&lt;/span>)
p&lt;span style="color:#555">=&lt;/span>[j&lt;span style="color:#555">/&lt;/span>s &lt;span style="color:#069;font-weight:bold">for&lt;/span> j &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#366">list&lt;/span>]
k1&lt;span style="color:#555">=&lt;/span>np&lt;span style="color:#555">.&lt;/span>random&lt;span style="color:#555">.&lt;/span>choice(&lt;span style="color:#366">len&lt;/span>(&lt;span style="color:#366">list&lt;/span>),&lt;span style="color:#f60">1&lt;/span>, p&lt;span style="color:#555">=&lt;/span>p)
a1&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#366">list&lt;/span>&lt;span style="color:#555">.&lt;/span>pop(k1[&lt;span style="color:#f60">0&lt;/span>])
s&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#366">sum&lt;/span>(&lt;span style="color:#366">list&lt;/span>)
p&lt;span style="color:#555">=&lt;/span>[j&lt;span style="color:#555">/&lt;/span>s &lt;span style="color:#069;font-weight:bold">for&lt;/span> j &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#366">list&lt;/span>]
k2&lt;span style="color:#555">=&lt;/span>np&lt;span style="color:#555">.&lt;/span>random&lt;span style="color:#555">.&lt;/span>choice(&lt;span style="color:#366">len&lt;/span>(&lt;span style="color:#366">list&lt;/span>),&lt;span style="color:#f60">1&lt;/span>, p&lt;span style="color:#555">=&lt;/span>p)
a2&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#366">list&lt;/span>&lt;span style="color:#555">.&lt;/span>pop(k2[&lt;span style="color:#f60">0&lt;/span>])
&lt;span style="color:#366">list&lt;/span>&lt;span style="color:#555">.&lt;/span>append(a1&lt;span style="color:#555">+&lt;/span>a2)
toc&lt;span style="color:#555">=&lt;/span>timeit&lt;span style="color:#555">.&lt;/span>default_timer()
&lt;span style="color:#366">print&lt;/span>(toc&lt;span style="color:#555">-&lt;/span>tic)
plt&lt;span style="color:#555">.&lt;/span>plot(&lt;span style="color:#366">sorted&lt;/span>(&lt;span style="color:#366">list&lt;/span>,reverse&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#069;font-weight:bold">True&lt;/span>))
plt&lt;span style="color:#555">.&lt;/span>xscale(&lt;span style="color:#c30">&amp;#39;log&amp;#39;&lt;/span>)
plt&lt;span style="color:#555">.&lt;/span>yscale(&lt;span style="color:#c30">&amp;#39;log&amp;#39;&lt;/span>)
plt&lt;span style="color:#555">.&lt;/span>show()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://blog.heysh.xyz/zipf/output_13_0.png" alt="png">&lt;/p>
&lt;p>好的，我们得到了 &lt;em>基于曲别针的互联网系统&lt;/em> ——至少可以算是个物联网。在这个网络里，（大概）80%的曲别针在20%的链子中，余下的曲别针散落在另外的地方。我们叫那些链子“曲别针巨头”。随着连接次数越来越多，链子越来越长，分散的曲别针越来越少，这就是“链子中心化”，我们现在互联网的状态。&lt;/p>
&lt;p>当继续这个过程的时候，最终（很快）就只剩下唯一一条长链，这就是我们互联网的末日&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>刘慈欣在还没有现在这么出名的时候，写过一篇叫做《赡养人类》的作品，提到了有关“终产者”的概念。当时，有人评论大刘“不懂政治，也不懂经济”，我十分希望这个人是对的。&lt;/p>
&lt;hr>
&lt;p>2018年4年3日的编辑：&lt;/p>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/ccNUtbywz9JgDI9pj6FJlw">这里&lt;/a>有另一个Zipf's Law的例子，可以看出，其仍然满足马太效应的性质。&lt;del>另外，别人的故事编的还是好啊。&lt;/del>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>这似乎和&lt;a href="https://act.eff.org/action/protect-the-open-internet-order">Net neutrality&lt;/a>并不是一回事。并没有什么邪恶组织，邪恶的只有系统而已。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>