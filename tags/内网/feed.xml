<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>内网 on 林中阴影</title><link>https://blog.heysh.xyz/tags/%E5%86%85%E7%BD%91/</link><description>Recent content in 内网 on 林中阴影</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;贺叶霜，&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA&lt;/a></copyright><lastBuildDate>Sat, 20 May 2023 16:06:47 +0800</lastBuildDate><atom:link href="https://blog.heysh.xyz/tags/%E5%86%85%E7%BD%91/feed.xml" rel="self" type="application/rss+xml"/><item><title>穷人的IP-KVM远程访问</title><link>https://blog.heysh.xyz/2023/05/20/ipkvm_4_poor_man/</link><pubDate>Sat, 20 May 2023 16:06:47 +0800</pubDate><guid>https://blog.heysh.xyz/2023/05/20/ipkvm_4_poor_man/</guid><description>&lt;blockquote>
&lt;p>说起DIY的IP-KVM，当然是&lt;a href="https://github.com/pikvm/pikvm">PiKVM&lt;/a>以及一系列衍生项目，可是对于&lt;del>那些把钱投入庞氏骗局的&lt;/del>穷人来说，RPI4已经远不能称为&lt;em>inexpensive&lt;/em>。近几天，我从垃圾堆里翻出了&lt;strong>同样&lt;/strong>昂贵的Phicomm N1和一张30块的视频采集卡，发现正好也能用。&lt;/p>
&lt;/blockquote>
&lt;figure>&lt;img src="pikvm.png"
alt="有较强的自我管理意识.png"/>&lt;figcaption>
&lt;p>有较强的自我管理意识.png&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>把远程控制取名叫作IP-KVM，这对于SEO来说过于不友好了。每当搜索Google的时候，总会看到有人试图在N1上跑虚拟化（aka KVM），可能是对2G内存有些什么不切实际的幻想。最后，在GitHub上找到了在N1上安装PiKVM的脚本：&lt;a href="https://github.com/toss-a/pikvm-armbian">toss-a/pikvm-armbian&lt;/a>。不过这里的&lt;a href="https://github.com/toss-a/pikvm-armbian/blob/master/README-zh-CN.MD">说明&lt;/a>也稍微有些简略，我会努力稍微详细一点点，尽量。&lt;/p>
&lt;p>那么，需要准备下面这些东西：&lt;/p>
&lt;ol>
&lt;li>N1一台；
&lt;blockquote>
&lt;p>我的N1是从垃圾堆里捡回来的，如果是新购的话，应该会有一些更新、&lt;a href="https://github.com/toss-a/pikvm-armbian/blob/master/README-zh-CN.MD#1%E9%80%89%E6%8B%A9%E5%8E%9F%E7%94%9F%E5%B8%A6%E6%9C%89otg%E7%9A%84%E5%BC%80%E5%8F%91%E7%89%88-%E4%BE%8B%E5%A6%82">更好的选择&lt;/a>。注意，这些选择需要能够OTG。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>USB公对公数据线一条；
&lt;blockquote>
&lt;p>因为N1的USB口有OTG功能，直接连接被控电脑就可以模拟鼠标和键盘。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>视频采集卡一张，配HDMI线一条；
&lt;blockquote>
&lt;p>因为N1没有USB3.0接口，MS2109芯片就足够了，可以跑1080p@30Hz。
&lt;img src="ms2109.webp" alt="大概长这样：">&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>U盘一块；&lt;/li>
&lt;li>Linux知识一些；&lt;/li>
&lt;li>可能会需要：
&lt;ol>
&lt;li>USB键盘一个；&lt;/li>
&lt;li>USB延长线一条；&lt;/li>
&lt;li>理想的上网环境。
&lt;blockquote>
&lt;p>根据相关法律法规和政策（下略）&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>不需要准备Arduino、BadUSB、USB Rubber Ducky，或者其他的单片机，虽然我的垃圾堆里也有不少。&lt;/p>
&lt;h2 id="安装系统armbianubuntu口味的">安装系统：Armbian（Ubuntu口味的）&lt;/h2>
&lt;p>这部分已经有很多人写过了，大概步骤是降级—BalenaEcther镜像写入U盘—Armbian写入EMMC。可以参考&lt;a href="https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/README.cn.md#%E5%AE%89%E8%A3%85-armbian-%E5%88%B0-emmc">GitHub说明&lt;/a>、&lt;a href="https://ethanblog.com/tips/play-with-n1-box.html">其他人的博客&lt;/a>或者&lt;a href="https://www.bilibili.com/video/BV1QJ411k7AH/">B站&lt;/a>。要注意，在盒子的原始系统尚未关机时不要插入U盘，Android系统会破坏U盘文件的权限。&lt;/p>
&lt;p>Armbian镜像我使用的是&lt;a href="https://github.com/ophub/amlogic-s9xxx-armbian/releases/download/Armbian_jammy_lts_2023.05/Armbian_23.05.0_amlogic_s905d_jammy_6.1.27_server_2023.05.13.img.gz">Armbian_23.05.0_amlogic_s905d_jammy_6.1.27_server_2023.05.13.img.gz&lt;/a>，其中，&lt;code>S905d&lt;/code>是N1所用的芯片，&lt;code>Jammy&lt;/code>是Ubuntu的版本号，&lt;code>6.1.27&lt;/code>代表使用的是最新版本的Linux内核。如果安装PiKVM，Debian系列（bullseye）的软件包有些太老了。&lt;/p>
&lt;h2 id="修改dtb文件">修改dtb文件&lt;/h2>
&lt;blockquote>
&lt;p>好，到这里时，我会假设：N1已经刷成了Ubuntu风味的Armbian系统；连接好网络，有线无线都可以；能够输入命令——不管是直接插键盘显示器，或是通过SSH，还是直接从电路板上引出导线。&lt;/p>
&lt;/blockquote>
&lt;p>在上述的Armbian引导文件中，默认的USB模式是Host，为了模拟鼠标、键盘等设备，需要将&lt;code>dr_mode&lt;/code>从&lt;code>host&lt;/code>更改为&lt;code>peripheral&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。那么，我们需要重新编译dtb文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#09f;font-style:italic"># 将dtb编译为dts文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dtc -I dtb -O dts -o test.dts /boot/dtb/amlogic/meson-gxl-s905d-phicomm-n1.dtb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#09f;font-style:italic"># 用你喜欢的编辑器打开这个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim test.dts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>test.dts&lt;/code>中搜索&lt;code>dr_mode&lt;/code>，寻找首个&lt;code>dr_mode = &amp;quot;host&amp;quot;;&lt;/code>，改为&lt;code>dr_mode = &amp;quot;peripheral&amp;quot;;&lt;/code>。
这里的上下文大概是这样：
&lt;img src="carbon.png" alt="注意红字位置">
后面的&lt;code>dr_mode&lt;/code>不必修改。不要问我为什么，这部分超出了我的能力。之后重新把dts编译回去，移动到&lt;code>/boot/dtb/amlogic/&lt;/code>，并且修改启动项：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>dtc -I dts -O dtb -o n1-test.dtb test.dts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mv n1-test.dtb /boot/dtb/amlogic/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo vim /boot/uEnv.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把&lt;code>FDT&lt;/code>一行改为&lt;code>FDT=/dtb/amlogic/n1-test.dtb&lt;/code>：
&lt;img src="carbon2.png" alt="最近觉得carbon.now.sh还挺棒哒">&lt;/p>
&lt;p>然后重启系统。&lt;/p>
&lt;h2 id="安装脚本">安装脚本&lt;/h2>
&lt;blockquote>
&lt;p>此时，假设你能够透明地访问github和其他网站，&lt;code>curl google.com&lt;/code>返回&lt;code>302&lt;/code>或者&lt;code>200&lt;/code>。如果不行的话，可以尝试在N1上安装&lt;a href="https://github.com/zfl9/ss-tproxy">zfl9/ss-tproxy&lt;/a>，让N1同时承担旁路网关的功能。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/toss-a/pikvm-armbian.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">cd&lt;/span> pikvm-armbian
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在提示&lt;code>&amp;quot;Do you want to apply custom patches? [y/n] &amp;quot;&lt;/code>时，选择N。&lt;/p>
&lt;p>接下来，重启系统，再次运行&lt;code>install.sh&lt;/code>，然后关机。&lt;/p>
&lt;h2 id="连线和启动">连线和启动&lt;/h2>
&lt;p>N1靠近HDMI接口的USB口已经改为OTG从机模式，把双公头USB线插在这里，另一头插到被控计算机上。这时候，如果视频采集卡插不上的话，拿出提前准备好的延长线。下面的照片来自&lt;a href="https://pockies.github.io/2019/03/07/phicomm-n1/">这里&lt;/a>，照相技术牛逼疯了。&lt;/p>
&lt;p>&lt;img src="n1.excalidraw.png" alt="牛逼疯了！">&lt;/p>
&lt;p>重新插入电源，用随便的浏览器访问N1的IP地址，并忽略证书错误提示。初始用户名和密码都是&lt;code>admin&lt;/code>，别忘了修改登录密码，用&lt;code>sudo kvmd-htpasswd set admin&lt;/code>。&lt;/p>
&lt;p>另外，感谢&lt;a href="https://github.com/pikvm/pikvm">pikvm&lt;/a>项目，有钱的话就去支持&lt;a href="https://pikvm.org/">他们的硬件&lt;/a>吧！&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Ref：&lt;a href="https://github.com/toss-a/pikvm-armbian/blob/master/README-zh-CN.MD#%E7%AC%AC%E4%BA%8C%E6%AD%A5">README&lt;/a>，这个写的其实挺清楚的，比我的好。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>内网访问第三季：在运营商的CGNAT网络下</title><link>https://blog.heysh.xyz/2023/05/10/through-nat/</link><pubDate>Wed, 10 May 2023 21:05:13 +0800</pubDate><guid>https://blog.heysh.xyz/2023/05/10/through-nat/</guid><description>&lt;blockquote>
&lt;p>是的，在&lt;a href="https://blog.heysh.xyz/2021/07/20/beyond-nat/">这次&lt;/a>和&lt;a href="https://blog.heysh.xyz/2022/05/22/connect-every-something//#%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEtailscaletinc%E6%88%96wireguard">这次&lt;/a>之后，在酒店里百无聊赖的现在，我又开始折腾起VPN来了。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>是的，在酒店里仍然没有IPv6地址。&lt;/p>
&lt;/blockquote>
&lt;h2 id="为什么">为什么&lt;/h2>
&lt;p>正如&lt;a href="https://blog.heysh.xyz/2022/05/22/connect-every-something//#%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEtailscaletinc%E6%88%96wireguard">前文&lt;/a>所述，无论是Tailscale/Headscale、Nebula或Netmaker，原理均大同小异，都是在Wireguard基础上，用类STUN协议来穿越NAT，或利用TURN（DERP）服务器进行转发。在国内家庭宽带网络环境下，一般存在路由器、光猫、运营商三重NAT防火墙，STUN需要跨越多重阻碍，自动穿越希望渺茫；另一方面，公开转发服务多在国外，延迟高居不下，而国内私有云价格亦是高不可攀，自建服务并非经济的选择。&lt;/p>
&lt;p>然而，三重NAT也并非坚不可摧。光猫一级，只要改为桥接，便可迎刃而解；路由一级，可以通过端口映射来绕过；而运营商级多为NAT1，通过&lt;a href="https://github.com/MikeWang000000/Natter/tree/v0.9">Natter&lt;/a>或&lt;a href="https://github.com/heiher/natmap">natmap&lt;/a>，可以获得近似公网的效果。这样，使用纯粹的Wireguard，也能够直接回到家庭网络内部，免去国外中转的烦恼。&lt;/p>
&lt;p>&lt;figure>&lt;img src="ping1.png"
alt="从广东联通到北京联通。"/>&lt;figcaption>
&lt;p>从广东联通到北京联通。&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="ping2.png"
alt="从广东联通经北京联通到甘肃移动。个人觉得，在这种延迟下追求Full Mesh也不再重要了。"/>&lt;figcaption>
&lt;p>从广东联通经北京联通到甘肃移动。个人觉得，在这种延迟下追求Full Mesh也不再重要了。&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h2 id="怎么做">怎么做&lt;/h2>
&lt;p>在开始之前，首先检查是否满足以下要求：&lt;/p>
&lt;ol>
&lt;li>一台长期开启的设备。
&lt;blockquote>
&lt;p>既然有远程访问的要求，远处有一台服务器是很自然的吧。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>光猫处于桥接状态。&lt;/li>
&lt;li>主路由是OpenWRT，或者内网里有DMZ主机。
&lt;blockquote>
&lt;p>或者，你是端口转发专家，可以从光猫外侧一路转发到最内部。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>没有公网IPv4，但在路由器处测试NAT类型为NAT1。
&lt;blockquote>
&lt;p>这里可以用&lt;a href="https://github.com/MikeWang000000/Natter/tree/v0.9">Natter&lt;/a>自带的功能来测试。如果你有公网IPv4的话，直接打开端口就好，而且我会很羡慕你。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>一个自己的域名，最好是在Cloudflare上托管的。
&lt;blockquote>
&lt;p>需要DDNS功能实时更新域名。如果没有域名的话，可能需要一些别的手段来实时得到端口。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>具体配置部分已经有人写的很详细了。首先按照&lt;a href="https://www.procustodibus.com/blog/2020/11/wireguard-point-to-site-config/">WireGuard Point to Site Configuration&lt;/a>设置点到站点的连接，然后按照&lt;a href="https://github.com/heiher/natmap/wiki/wireguard">natmap Wiki&lt;/a>设置NATMap即可。注意，在路由器上操作的时候，一定要记得在防火墙中&lt;strong>打开对应端口&lt;/strong>。&lt;/p>
&lt;p>完成以上步骤之后，应该已经可以从移动网络访问内网的Wireguard Peer了。&lt;/p>
&lt;h2 id="一点问题">一点问题&lt;/h2>
&lt;p>由于运营商网关不受我们控制，外网的IP和端口号都是随机分配的，每当地址变化时，NATMap将执行自定义脚本。在上面的Wiki中，利用DDNS，把IPv4地址和端口编码进IPv6的AAAA记录中。这并不是一种标准的技术，不过既然&lt;code>2001::&lt;/code>就是给&lt;code>teredo&lt;/code>使用的，在这里随便用用也无所谓。&lt;/p>
&lt;p>对于Windows下的Wireguard客户端，我（和ChatGPT一起）写了一个&lt;a href="https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-wg-ps1">PowerShell脚本&lt;/a>，能够自动修改配置文件的&lt;code>Endpoint&lt;/code>并调用&lt;code>wireguard.exe&lt;/code>进行连接。&lt;/p>
&lt;p>使用方法：&lt;/p>
&lt;ol>
&lt;li>安装&lt;a href="https://github.com/WireGuard/wireguard-windows/blob/master/docs/enterprise.md">wireguard-windows&lt;/a>，用客户端连接测试成功。&lt;/li>
&lt;li>在文件夹&lt;code>C:\example&lt;/code>下建立&lt;a href="https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-wg-ps1">wg.ps1&lt;/a>和&lt;a href="https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-nat-conf">nat.conf&lt;/a>，粘贴Gist内容。&lt;/li>
&lt;li>按照实际情况修改&lt;code>nat.conf&lt;/code>，以及&lt;code>wg.ps1&lt;/code>中&lt;code>$Hostname&lt;/code>部分。&lt;code>Endpoint&lt;/code>不必修改。&lt;/li>
&lt;li>以管理员身份运行&lt;code>PowerShell&lt;/code>&lt;/li>
&lt;li>设置&lt;code>ps1&lt;/code>脚本运行权限：&lt;code>Set-ExecutionPolicy RemoteSigned&lt;/code>（或Unrestricted）&lt;/li>
&lt;li>启动、重启Wireguard：&lt;code>C:\example\wg.ps1 -up&lt;/code>&lt;/li>
&lt;li>停止Wireguard：&lt;code>C:\example\wg.ps1 -down&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>在Windows 11, Powershell 5.1.22621.963测试通过，也可以配合Windows下的&lt;a href="https://bjansen.github.io/scoop-apps/main/sudo/">sudo&lt;/a>使用。&lt;/p>
&lt;p>另外，在Android下，也可以用termux运行&lt;a href="https://gist.github.com/heyeshuang/0054c73e3f2762f12a16165a5cfe8213#file-nm-echo-sh">nm-echo.sh&lt;/a>来获得IP地址，手动修改Wireguard官方客户端中的IP。&lt;/p>
&lt;figure>&lt;img src="%e8%bf%9e%e6%8e%a5%e6%97%b6%e9%97%b4.png"
alt="我这里最近一次分配的端口坚持了18天，所以应该不必时常刷新。"/>&lt;figcaption>
&lt;p>我这里最近一次分配的端口坚持了18天，所以应该不必时常刷新。&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>如果需要更为稳定的访问，可以参考&lt;a href="https://gist.github.com/z0mb1e-kgd/54aede86adf2e30e390dba13886d18e1">reresolve-dns.ps1&lt;/a>，这个脚本可以在上一次握手时间过久时刷新DNS，但是因为要添加计划任务，有一点过于复杂了。&lt;/p>
&lt;h2 id="bonus">Bonus&lt;/h2>
&lt;p>Natmap的另一种用法是映射BT客户端，从而使外来连接能够主动发起连接，获得所谓的&lt;code>High ID&lt;/code>。见&lt;a href="https://github.com/wits-fe/bittorrent-NAT-hole-punching">wits-fe/bittorrent-NAT-hole-punching&lt;/a>。在PT站做种的时候应该会很有用。&lt;/p>
&lt;h2 id="附性能测试">附：性能测试&lt;/h2>
&lt;blockquote>
&lt;p>随便找了一个公共WiFi，用手机（一加7T）上Termux中的&lt;code>iperf3&lt;/code>测速。&lt;/p>
&lt;/blockquote>
&lt;p>由于多层NAT的限制，Nebula类组网工具必须部署在路由器位置。可以看出，对路由器（万元级，K3）带来的压力还是比较大的。&lt;/p>
&lt;p>&lt;figure>&lt;img src="iperf-1.svg"
alt="WireGuard for Android"/>&lt;figcaption>
&lt;p>WireGuard for Android&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="iperf-2.svg"
alt="NB4A提供的Wireguard Outbound"/>&lt;figcaption>
&lt;p>NB4A提供的Wireguard Outbound&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="iperf-3.svg"
alt="Nebula，对端部署在路由器上"/>&lt;figcaption>
&lt;p>Nebula，对端部署在路由器上&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>很难想象，对于访问内网这样一个简单的需求，我居然花费了如此多的精力。不过，这次应该算是当前比较满意的方案，应该能坚持到下次水逆开始。&lt;/p></description></item><item><title>仅IPv6家庭内网服务实现v6+v4双栈访问</title><link>https://blog.heysh.xyz/2023/02/07/beyond-nat-2023/</link><pubDate>Tue, 07 Feb 2023 17:29:00 +0800</pubDate><guid>https://blog.heysh.xyz/2023/02/07/beyond-nat-2023/</guid><description>&lt;p>是的，连回家里NAS的正常手段，当然是ZeroTier/Tinc/OpenVPN之类。但是如果还有其他人想要看照片的话，不要期待手机上会有除了浏览器之外的东西。&lt;/p>
&lt;p>在这种场景，如果：&lt;/p>
&lt;ol>
&lt;li>有一台常开的NAS、矿渣或whatever，&lt;/li>
&lt;li>在Cloudflare上有一个自己的域名，&lt;/li>
&lt;li>家里的宽带有IPv6，而且防火墙可以自己控制（aka 光猫桥接），&lt;/li>
&lt;li>不想或者不能打开80、443端口，没办法直接使用Cloudflare代理；&lt;/li>
&lt;/ol>
&lt;p>那么可以通过本文的方案，获得高位端口的CF代理。这样，在没有IPv6的地方也能够访问家里的服务了。&lt;/p>
&lt;p>如果上面的条件不满足的话，可以尝试&lt;code>FRP&lt;/code>和&lt;code>Cloudflare Tunnel&lt;/code>之类的东西。&lt;/p>
&lt;h2 id="打开端口ddns">打开端口、DDNS&lt;/h2>
&lt;p>首先我们需要保证NAS上的IPv6端口能从公网访问，并把域名指向家里的IPv6地址。打开端口的部分可以看看&lt;a href="https://blog.heysh.xyz/2021/07/20/beyond-nat/">之前的博文&lt;/a>；DDNS我在使用&lt;a href="https://github.com/jeessy2/ddns-go">ddns-go&lt;/a>（这里可能需要科学上网）。注意，此时先不要开启Cloudflare代理。&lt;/p>
&lt;p>完成这部分之后，我们的域名（比如说home.example.net）指向了家里的IP，并且防火墙打开了端口（比如38000）。可以在NAS上开个&lt;code>python -m http.server 38000&lt;/code>，并用移动网络测试一下。&lt;/p>
&lt;p>对了，Cloudflare的token不要扔，待会还有用。&lt;/p>
&lt;h2 id="caddy">Caddy&lt;/h2>
&lt;p>安装&lt;a href="https://caddyserver.com/download?package=github.com%2Fcaddy-dns%2Fcloudflare">包含Cloudflare DNS插件的Caddy&lt;/a>。因为家里没有80和443端口，所以需要用DNS-01方式申请TLS证书：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Caddyfile" data-lang="Caddyfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#09f;font-style:italic">## cat /etc/caddy/Caddyfile
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#09f;font-style:italic">&lt;/span>(cloudflare) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">tls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">dns&lt;/span> &lt;span style="color:#c30">cloudflare&lt;/span> &lt;span style="color:#c30">abcdefgh&lt;/span>&lt;span style="color:#09f;font-style:italic"> #刚才说的Cloudflare的token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#09f;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#030;font-weight:bold">home.example.net:38000&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">reverse_proxy&lt;/span> http://localhost:&lt;span style="color:#f60">1234&lt;/span>&lt;span style="color:#09f;font-style:italic"> #这里是内网服务的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#09f;font-style:italic">&lt;/span> &lt;span style="color:#069;font-weight:bold">import&lt;/span> cloudflare&lt;span style="color:#09f;font-style:italic"> #申请证书的部分
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启Caddy。这里结束后，移动网络（就是有IPv6地址的网络）应该能够通过&lt;code>https://home.example.net:38000&lt;/code>访问服务了。&lt;/p>
&lt;h2 id="cloudflare">Cloudflare&lt;/h2>
&lt;figure>&lt;img src="SSL_TLS.png"/>&lt;figcaption>
&lt;h4>把SSL/TLS加密模式改为完全；&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;figure>&lt;img src="Origin_Rules.png"/>&lt;figcaption>
&lt;h4>添加Origin Rules，把请求转至高位端口；&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>开启Cloudflare代理。&lt;a href="https://github.com/jeessy2/ddns-go/issues/336">在DDNS服务上也开启Cloudflare代理&lt;/a>。&lt;/p>
&lt;p>好了，大概就是这样。通过CF，也许自家的网络也能稍微安全一点。&lt;/p></description></item><item><title>几物互联</title><link>https://blog.heysh.xyz/2022/05/22/connect-every-something/</link><pubDate>Sun, 22 May 2022 22:45:39 +0800</pubDate><guid>https://blog.heysh.xyz/2022/05/22/connect-every-something/</guid><description>&lt;blockquote>
&lt;p>我被封在外面了。这种时候非常想念192.168.1.1……也非常适合写博客来回忆熟悉的网络。&lt;/p>
&lt;/blockquote>
&lt;p>无论是在家里的组装机还是漂泊的笔记本，在工作的时候都能够获得相似的上下文，有的时候甚至可以在家CTRL+C，在公司CTRL+V。除了&lt;em>鸿蒙&lt;/em>系统之外，通过一组软件也是可以实现的。&lt;/p>
&lt;p>本人现在所使用的方案如下。设置难度由易到难排序。&lt;/p>
&lt;h2 id="同步存储syncthing">同步存储：Syncthing&lt;/h2>
&lt;blockquote>
&lt;p>前置条件：两台（或以上）容量较高的电子设备&lt;/p>
&lt;/blockquote>
&lt;p>比起云存储，个人更倾向于Syncthing这样的本地同步方案：至少文件是属于自己的（而且还不用收钱）。安装也很简单：Windows下安装&lt;a href="https://github.com/canton7/SyncTrayzor">SyncTrayzor&lt;/a>，Android下安装&lt;a href="https://github.com/Catfriend1/syncthing-android">Syncthing-Fork&lt;/a>，其他系统移步&lt;a href="https://syncthing.net/downloads/">这里&lt;/a>就可以。安装完以后，在两边选择工作目录，就可以完成双向同步了。得益于STUN服务器，无论是在内网还是外网，文件都可以完成传输。&lt;/p>
&lt;p>当然，Syncthing也有一定的问题。首先是，因为是进行了同步，同一份文件会在每一个设备上都占用一份空间。在手机这样捉襟见肘的环境下，建议采用“仅发送”模式，只用来备份照片之类的。&lt;/p>
&lt;p>另外，Syncthing在运行的时候必须要两侧的设备保持开机，电费账单+1。在有一方离线的时候，需要注意文件的版本，不要在两边都修改同一个文件。毕竟不是git，合并功能没有那么强。&lt;/p>
&lt;h2 id="笔记软件与文献管理">笔记软件与文献管理&lt;/h2>
&lt;blockquote>
&lt;p>前置条件：同步的话需要Syncthing，或者云存储。&lt;/p>
&lt;/blockquote>
&lt;p>本人使用&lt;a href="https://joplinapp.org/">Joplin&lt;/a>和&lt;a href="https://www.zotero.org/">Zotero&lt;/a>来做笔记和进行文献管理，这两款软件都可以使用Syncthing作为同步后端&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，而且都具有笔记功能。我的习惯是，在Joplin上写一些需要较长篇幅的笔记，文献阅读笔记放在Zotero中。&lt;/p>
&lt;p>当然，作为一篇讲“互联”的博文，这两款软件当然也是可以相互连接的。我主要用到下面这些：&lt;/p>
&lt;h3 id="joplin内部">Joplin内部&lt;/h3>
&lt;p>当然Joplin不是为了双链笔记而设计的，但是通过插件&lt;a href="https://github.com/ylc395/joplin-plugin-note-link-system">plugin-note-link-system&lt;/a>也可以获得一部分双链笔记的功能，比如说，方便地在一篇笔记里引用另外一篇笔记的某个小标题；或者是在另一篇笔记里看到backlinks。&lt;/p>
&lt;h3 id="笔记引用zotero参考文献">笔记引用Zotero参考文献&lt;/h3>
&lt;p>通过&lt;a href="https://retorque.re/zotero-better-bibtex/">Better BibTeX for Zotero&lt;/a>的&lt;code>Quick Copy&lt;/code>功能，按下&lt;code>Ctrl+Shift+C&lt;/code>，就可以把当前文献复制成类似&lt;code>[xxx](zotero://select/library/items/xxxxxx)&lt;/code>的链接。这种方式对别的笔记软件也适用，只要它能够打开&lt;code>URL Scheme&lt;/code>。&lt;/p>
&lt;h3 id="引用计算机上的其他内容">引用计算机上的其他内容&lt;/h3>
&lt;p>肯定没有人想把所有文件都塞进笔记本的数据库里，总是要引用一些外部文件的，这时候还是需要用万能的链接。这里的链接格式类似&lt;code>[xxx](file://C:\工作\xxx.docx)&lt;/code>，在Windows系统下既有斜杠也有反斜杠，但是很神奇地能够正确找到。&lt;/p>
&lt;p>实际上还有一个问题，通过Syncthing同步后，文件在每台电脑上的链接地址是不一样的。所以，我在每台电脑的C盘做了一个文件夹链接&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。在Powershell下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">New-Item&lt;/span> -ItemType Junction -Path &lt;span style="color:#c30">&amp;#34;C:\工作&amp;#34;&lt;/span> -Target &lt;span style="color:#c30">&amp;#34;C:\实际的\工作\目录&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者也可以用&lt;a href="https://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html">Link Shell Extension&lt;/a>来做这件事。之后，在每台电脑上都可以访问&lt;code>C:\工作\xxx.docx&lt;/code>了。&lt;/p>
&lt;h2 id="随处ctrlv以及传文件">随处Ctrl+V，以及传文件&lt;/h2>
&lt;blockquote>
&lt;p>是这样的张总：你在家里的电脑上按了CTRL+C,然后在公司的电脑上再按CTRL+V是肯定不行的。即使同一篇文章也不行。不不，多贵的电脑都不行。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>前置条件：需要在同一个局域网下面——所以确实不行。&lt;/p>
&lt;/blockquote>
&lt;p>隆重推荐&lt;a href="https://binary-factory.kde.org/job/kdeconnect-kde_Release_win64/">KDE connect&lt;/a>，虽然是KDE出品，但是Windows和Android也能用。给手机和电脑装上这个，在同一个局域网下面就可以共享剪贴板了，而且还能够互相传文件。&lt;/p>
&lt;p>不过，有的时候KDE connect找不到局域网设备，这时候我会用Total Commander (Android)的Wifi传输插件，或者是&lt;code>python -m http.server&lt;/code>。&lt;/p>
&lt;h2 id="远程访问tailscaletinc或wireguard">远程访问：Tailscale、Tinc或Wireguard&lt;/h2>
&lt;blockquote>
&lt;p>前置条件：家里24小时开机的矿渣/跳板机/树莓派/NAS；有公网IP的VPS&lt;/p>
&lt;/blockquote>
&lt;p>像&lt;a href="https://blog.heysh.xyz/2021/07/20/beyond-nat/">之前&lt;/a>所说的那样，当前，如果我想要在外面访问家里的局域网，我会使用Tinc来建立隧道。运气好（外面有IPv6地址，大多是手机分享Wifi）的时候，可以直接连到自己的、IPv6地址与某个域名绑定的“跳板机”（ARM矿渣）上；运气不好的话，会自动有一台国外VPS进行转发，速度大概在~100K/s。如果用Wireguard的话性能会更好，可是我一直没有找到像Tinc一样简单的节点转发方案。&lt;/p>
&lt;p>连接Tinc之后，就可以通过&lt;code>Wake On LAN&lt;/code>唤醒自己的其他电脑，然后用&lt;code>samba&lt;/code>、远程桌面之类的软件了。就好象回到家里&lt;del>居家办公&lt;/del>一样！&lt;/p>
&lt;p>当然，在这种需求下，最简单的应该是&lt;code>Tailscale&lt;/code>，但是由于迫害妄想，我一直没有尝试，而是另外找了类似的东西：&lt;/p>
&lt;details>
&lt;summary>
&lt;h4 class="inline">
剧透：最后这些我都没用
&lt;/h4>
&lt;/summary>
&lt;ul>
&lt;li>&lt;a href="https://github.com/slackhq/nebula">https://github.com/slackhq/nebula&lt;/a>
&lt;ul>
&lt;li>&lt;del>无法通过公共节点转发&lt;/del>现在可以了&lt;/li>
&lt;li>两个Android客户端在移动网络、甚至是同一个无线网络都无法连接，离谱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/tonarino/innernet">https://github.com/tonarino/innernet&lt;/a>
&lt;ul>
&lt;li>只实现了STUN，没有实现TURN&lt;/li>
&lt;li>也无法通过公共节点转发&lt;/li>
&lt;li>无Android支持&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/juanfont/headscale">https://github.com/juanfont/headscale&lt;/a>
&lt;ul>
&lt;li>&lt;del>无Android支持&lt;/del>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/gravitl/netmaker/">https://github.com/gravitl/netmaker/&lt;/a>
&lt;ul>
&lt;li>构建需要docker和干净的服务器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/wiretrustee/wiretrustee">https://github.com/wiretrustee/wiretrustee&lt;/a>
&lt;ul>
&lt;li>无Android支持，Wireguard客户端无法使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/dswd/vpncloud">vpncloud&lt;/a>
&lt;ul>
&lt;li>只支持Linux&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p>好了，这次我想说的就是这些。办公室冰冷的行军床正在等着我。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Joplin使用&lt;code>File System&lt;/code>作为同步目标，Zotero使用&lt;a href="http://zotfile.com/">Zotfile&lt;/a>插件。就我自己而言，Joplin用了OneDrive，在手机上同步比起SyncThing更方便一些；Zotero那边，我自建了WebDAV服务，这纯粹是因为那时候我还没找到插件。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>其实是&lt;a href="https://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html#junctions">Junction&lt;/a>，对于应用来说完全透明，两边的文件是完全一样的。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>你可能并不需要内网穿透</title><link>https://blog.heysh.xyz/2021/07/20/beyond-nat/</link><pubDate>Tue, 20 Jul 2021 17:03:31 +0800</pubDate><guid>https://blog.heysh.xyz/2021/07/20/beyond-nat/</guid><description>&lt;blockquote>
&lt;p>最近搬家了，互联网从联通变成了便宜一些的电信。于是，我失去了之前的公网IP&lt;code>114.*.*.*&lt;/code>，换来了&lt;code>100.64.*.*&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。不过，IPv6地址仍然是&lt;code>2404::****&lt;/code>，这个应该也算是所谓的 &lt;em>公网IP&lt;/em> 吧？&lt;/p>
&lt;/blockquote>
&lt;h2 id="准备">准备&lt;/h2>
&lt;ol>
&lt;li>和安装网络的大叔说，我需要把光猫改成桥接模式，并保证“咱是专业的，不会弄坏网线，弄坏了也不会去投诉”；&lt;/li>
&lt;li>找一个稍微新一点的路由器，我用的是刷了&lt;code>OpenWRT&lt;/code>的，&lt;strong>非常贵的&lt;/strong>跑路K3；&lt;/li>
&lt;li>&lt;a href="https://test-ipv6.com">test-ipv6.com&lt;/a>显示了IPv6地址而且没有给你打零分。&lt;/li>
&lt;/ol>
&lt;figure>&lt;img src="ipv6-test.png"/>&lt;figcaption>
&lt;h4>比如这样&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="打开端口">打开端口&lt;/h2>
&lt;p>虽然没有了NAT，但是防火墙还是必不可少的，毕竟在互联网上随意敞开自己的端口和裸奔没有什么区别。当然，稍微露出一点点的话没有什么问题，所以我开了几个五位数的端口，用来SSH。&lt;/p>
&lt;figure>&lt;img src="ipv6-firewall.png"/>&lt;figcaption>
&lt;h4>就像这样（图像经过处理，实际上有更多规则，而且端口也不是这几个）&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>如果对安全要求更高的话，可以参考&lt;a href="https://blog.ptsang.net/match-ipv6-dynamic-addresses-in-iptables?utm_source=pocket_mylist">这里&lt;/a>匹配IPv6地址的末几位，就像&lt;code>::abcd:1234:5678:90ef/::ffff:ffff:ffff:ffff&lt;/code>这样。&lt;/p>
&lt;p>在这个时候，你应该已经可以通过手机移动网络用SSH连接回自己主机的IPv6地址了。就和公网一模一样。&lt;/p>
&lt;h2 id="绑定域名">绑定域名&lt;/h2>
&lt;p>任何一个支持IPv6的AAAA地址绑定的DDNS服务都可以。我家里恰好有一个长期开机的矿渣&lt;code>贝壳云&lt;/code>，是某次水逆之后想要买树莓派四，忍住了却又没有完全忍住的结果；之前写的&lt;a href="https://blog.heysh.xyz/2018/07/05/cloudflare-ddns/">cloudflare脚本&lt;/a>刚好能用。&lt;/p>
&lt;h2 id="跳板机自称">跳板机（自称）&lt;/h2>
&lt;p>如果想对内网完全控制，而不是仅仅几个端口的话，可能需要所谓跳板机的配合。仔细想想，这是一个跨越&lt;code>防火墙.little&lt;/code>的活动，对付&lt;code>防火墙 the Great&lt;/code>的软件也完全适用。所以我在内网设备（aka矿渣）上部署了某个V开头的软件，通过Android客户端连回家里完全没有问题&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>如果外面的Windows想要进来的话，我现在用的是已经跑路的&lt;code>SocksCap64&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>。把&lt;code>MSTSC.exe&lt;/code>加到列表里，就可以愉快地远程桌面了。&lt;/p>
&lt;hr>
&lt;p>来自210805的更新：后来我按照&lt;a href="https://chanix.github.io/TincCookbook/introduction/">这篇教程&lt;/a>在矿渣上部署了tinc，并且增加了&lt;a href="https://tinc-vpn.org/examples/proxy-arp/">ARP代理&lt;/a>用来访问内网。我又不能直接把家里的老光猫换掉……&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>用于在电信级NAT环境中服务提供商与其用户通信，&lt;a href="https://zh.wikipedia.org/wiki/%E4%BF%9D%E7%95%99IP%E5%9C%B0%E5%9D%80">维基百科&lt;/a>上说的。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>记住客户端不要&lt;code>绕过局域网地址&lt;/code>，我们用的就是局域网。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>TODO：急求一款没有跑路的、免费的、Windows下的全局代理软件。&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>