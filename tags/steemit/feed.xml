<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>steemit on 林中阴影</title><link>https://blog.heysh.xyz/tags/steemit/</link><description>Recent content in steemit on 林中阴影</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>&amp;copy;贺叶霜，&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA&lt;/a></copyright><lastBuildDate>Sat, 14 Oct 2017 23:04:00 +0800</lastBuildDate><atom:link href="https://blog.heysh.xyz/tags/steemit/feed.xml" rel="self" type="application/rss+xml"/><item><title>更琐碎的编辑器细节 / Some more trival details about Steemit</title><link>https://blog.heysh.xyz/2017/10/14/about-steemit-editor/</link><pubDate>Sat, 14 Oct 2017 23:04:00 +0800</pubDate><guid>https://blog.heysh.xyz/2017/10/14/about-steemit-editor/</guid><description>&lt;p>Steemit的前端代码在&lt;a href="https://github.com/steemit/condenser/">https://github.com/steemit/condenser/&lt;/a>，读一读它的源代码，可以了解一些关于编辑器的技术细节。&lt;/p>
&lt;h2 id="排版问题">排版问题&lt;/h2>
&lt;h3 id="markdown">Markdown&lt;/h3>
&lt;p>Steemit里所有的markdown指南都指向&lt;a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/&lt;/a>，但其实并没有实现其中所有的功能。大体上，使用其中标准的 &lt;em>Basic syntax&lt;/em> （或者叫做&lt;code>CommonMark&lt;/code>）是比较安全的，但github favor的部分就说不定了。&lt;/p>
&lt;p>&lt;a href="https://github.com/steemit/condenser/blob/8a4e470fea6a34a9e19f8598c5261fd414d96fa8/src/app/components/cards/MarkdownViewer.jsx">编辑器&lt;/a>使用的markdown渲染库是&lt;a href="https://github.com/jonschlinkert/remarkable">remarkable&lt;/a>。除了基本语法以外，只支持&lt;a href="https://github.com/jonschlinkert/remarkable/#syntax-extensions">脚注、删除线和表格&lt;/a>等一些基本的语法，而且现在脚注的实现还有些问题。没有 &lt;strong>代码高亮&lt;/strong> ，更没有 &lt;strong>数学公式渲染&lt;/strong> ，可能这东西并不是面对我们这样的用户。&lt;/p>
&lt;p>&lt;a href="https://steemit.com/wpcommunity/@sean0010/markdown-test">这里&lt;/a>是关于高级markdown特性的测试。从&lt;a href="https://steemd.com/wpcommunity/@sean0010/markdown-test">这里&lt;/a>可以看到其源码。&lt;/p>
&lt;p>顺便一提，我用的&lt;code>hugo&lt;/code>静态博客生成器使用&lt;code>blackfriday&lt;/code>，配置项很多，我十分满意。&lt;/p>
&lt;h3 id="那么用html实现高级功能呢">那么用HTML实现高级功能呢？&lt;/h3>
&lt;p>很遗憾，这也不大可能。经过&lt;a href="https://github.com/steemit/condenser/blob/4d9c1d8f76366097d9a7159b1760f51d45201eb0/src/app/utils/SanitizeConfig.js">sanitize&lt;/a>过滤，编辑器只支持以下几个标签：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>div, iframe, del,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a, p, b, i, q, br, ul, li, ol, img,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h1, h2, h3, h4, h5, h6, hr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>blockquote, pre, code, em, strong, center,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>table, thead, tbody, tr, th, td,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strike, sup, sub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>并没有什么超过Markdown语法的新功能。&lt;/p>
&lt;p>当然，编辑器好心地提供了几个class来控制文字和图像的位置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>&amp;#39;pull-right&amp;#39;, &amp;#39;pull-left&amp;#39;, &amp;#39;text-justify&amp;#39;, &amp;#39;text-rtl&amp;#39;, &amp;#39;text-center&amp;#39;, &amp;#39;text-right&amp;#39;, &amp;#39;videoWrapper&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用法大概是 &lt;code>&amp;lt; div class=&amp;quot;pull-right&amp;quot;&amp;gt; &amp;lt; img src=&amp;quot;imglink&amp;quot; /&amp;gt;&amp;lt; /div &amp;gt;&lt;/code>，或者看&lt;a href="https://steemit.com/steemit/@primus/how-to-use-new-hidden-steemit-features-for-custom-formatting-within-post-content-floating-right-left-and-justifying">这里&lt;/a>的介绍。&lt;/p>
&lt;h2 id="文章的url生成原理">文章的URL生成原理&lt;/h2>
&lt;p>如果我在发布之前就知道文章的URL的话，就可以在文中引用自己了。这大概是一种自举 ;-)&lt;/p>
&lt;p>如果你的文章标题是纯中文的话就很简单了：地址是随机的。所以最好在标题里加上些英文（虽然看起来有点蠢）。&lt;/p>
&lt;p>URL通过&lt;a href="https://github.com/pid/speakingurl">speakingurl&lt;/a>生成。比如，本文标题经过处理（过程见&lt;a href="https://jsfiddle.net/heyeshuang/6p7n7dks/1/">此处&lt;/a>），得到&lt;code>some-more-trival-details-about-steemit&lt;/code>，如果我之前没有发过同名文章的话，本文的URL就是&lt;a href="https://steemit.com/cn/@heyeshuang/some-more-trival-details-about-steemit">https://steemit.com/cn/@heyeshuang/some-more-trival-details-about-steemit&lt;/a>，大概。&lt;/p>
&lt;p>&lt;a href="https://github.com/steemit/condenser/blob/164144aa2c57c12b136eb9c3d7fe46d930dfda04/src/app/redux/TransactionSaga.js#L412-L442">这里&lt;/a>是源代码中具体的实现函数，适合像我这样刻薄的人。&lt;/p></description></item><item><title>对Steem的一些细节考察 / A closer look to Steem</title><link>https://blog.heysh.xyz/2017/10/08/about-steem/</link><pubDate>Sun, 08 Oct 2017 22:56:21 +0800</pubDate><guid>https://blog.heysh.xyz/2017/10/08/about-steem/</guid><description>&lt;h2 id="我的文章保存在哪里会保存多久">我的文章保存在哪里？会保存多久？&lt;/h2>
&lt;p>&lt;strong>保存在各个矿工 (Miner / Witness Node) 的区块链上；很可能是永久保存。&lt;/strong>&lt;/p>
&lt;p>和大多数区块链技术一样，一个矿工必须有完整的节点信息才可以进行挖矿。当然，具体的挖矿形式有一些区别，steem不需要超强的计算能力去破解hash，但是要求很低的网络延迟。&lt;/p>
&lt;p>这听起来好像跟&lt;a href="https://ipfs.io">IPFS&lt;/a>和&lt;a href="https://zeronet.io/">ZeroNet&lt;/a>差不多。分布式存储并不是什么新鲜事物，很久以前的bittorrent，emule什么的就已经做到了，但是问题是什么呢？&lt;/p>
&lt;p>当你上网去寻找一份200x年的、并不是十分热门的资料，但是只找到一个种子的时候，问题就出现了：这份信息被网络所遗忘了，也就是说，它死掉了。一份信息的死亡，并不是因为它自己有什么问题，只是因为不够红而已。&lt;/p>
&lt;p>当然，如果你恰巧拥有（原来的）迅雷会员，故事又将另当别论。在这个方面，商业公司比分布式存储更善良，或者说，记忆力更好。但是，当商业公司倒闭/转型/关闭离线下载服务的时候，我们就只能去爬虫的巢穴碰运气了。&lt;/p>
&lt;p>举个例子。在&lt;a href="http://www.rongshuxia.com/">榕树下&lt;/a>如日中天，起点还没有出现的时候，我曾经看到过一篇名为《魂系大榕树》的知青文学，那种生活深深吸引了年幼的我。但是，这几天我再去找的时候，榕树下早已不复当时的枝繁叶茂，而且那篇文字，名字改成了《榕树魂》，散落在了互联网的各个角落。&lt;/p>
&lt;p>听起来十分先进的IPFS和ZeroNet似乎并没有解决这个问题。现在，ZeroNet上搭建的一些网站已经无法访问了。但是，虽然Steem的评分规则也极端倾向热门文章，但这种技术确实让我看到了冷门信息生存的希望：&lt;/p>
&lt;ul>
&lt;li>Steem是以一个整体存储的，区块链技术保证了这一点。即使是大鲸的文章也是一样。&lt;/li>
&lt;li>Steem主要保存文字内容，这并不是什么优点，但可以称为一种妥协。
&lt;ul>
&lt;li>截止到2017.9.25日，整个Steem链子的体积大概是43GB（&lt;a href="https://steemit.com/steem/@crokkon/steem-blockchain-size">来源&lt;/a>），考虑到一张双层蓝光光碟的容量大概是50Gb，这并不是一个很大的数字。&lt;/li>
&lt;li>作为一个小小的提醒，现在Steemit上的图片都保存在&lt;a href="https://steemitimages.com/">https://steemitimages.com/&lt;/a>这个服务器上。&lt;a href="https://steemit.com/censorship/@mynameisbrian/storing-images-on-the-steem-blockchain-censorship-resistant-images">有人&lt;/a>正在尝试直接保存在区块链中，对此我持谨慎悲观态度，毕竟已经有文字可以保存了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>金钱。这个理由真的是太充足了，充足到之前的一切都变得毫无意义。让商业公司变得“善良”的动力，在steem这里也是一样。&lt;/li>
&lt;/ul>
&lt;p>所以，Steem的各位，希望你们能够尽量产出更多的优秀内容，托你们的福，像我们这样不讨人喜欢的家伙们，也可以在互联网上找到一个不会被轻易遗忘的地方。&lt;/p>
&lt;h2 id="那么我可以把自己的博客搬到这里来吗">那么，我可以把自己的博客搬到这里来吗？&lt;/h2>
&lt;p>&lt;strong>对我来说，暂时还不行。&lt;/strong>&lt;/p>
&lt;p>正是因为Steem的记忆力太好，想要抹掉什么几乎不可能，所以很多东西并不适合写在上面。另外，一些 &lt;em>特别&lt;/em> 不讨人喜欢的东西，我也不会放到这里，请移步&lt;a href="https://heyeshuang.github.io/blog">我的博客&lt;/a>。&lt;/p>
&lt;p>气温骤降，我必须更加谨慎一些。&lt;/p>
&lt;h2 id="另外的一些细节">另外的一些细节&lt;/h2>
&lt;p>Steemit使用的markdown解析器是&lt;code>remarkable&lt;/code>，并通过&lt;code>sanitize&lt;/code>对HTML进行清洁。更加精细的排版问题，我会另外找时间尝试一下。&lt;/p></description></item></channel></rss>